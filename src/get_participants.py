#!/usr/bin/env python
import pandas as pd
import typer
from pydantic import BaseModel
from rich.console import Console

from rives import Rives, Notice
from leaderboard import compute_leaderboard

GRAPHQL_URL = 'https://app.rives.io/graphql'
INSPECT_URL = 'https://app.rives.io/inspect'

DOOM_OLYMPICS_CONTESTS = [
    {
        'contest_id': '721f735bbca3721f735bbca37344e953be5362cd',
        'name': 'Lightning Run',
    },
    {
        'contest_id': '721f735bbca3721f735bbca349311acf7d414378',
        'name': 'Knuckle Crusher',
    },
    {
        'contest_id': '721f735bbca3721f735bbca3bc0c9a3c8f9d03de',
        'name': 'Infallible Aim'
    },
    {
        'contest_id': '721f735bbca3721f735bbca38baf804234f09e2e',
        'name': 'Secret Master',
    },
    {
        'contest_id': '721f735bbca3721f735bbca3de8c8af042857714',
        'name': 'Treasure Seeker',
    },
    {
        'contest_id': '721f735bbca3721f735bbca396345ea884a19e7d',
        'name': 'The Completionist',
    },
    {
        'contest_id': '721f735bbca3721f735bbca398e1aecc0ec47a04',
        'name': 'Enemy Eradicator',
    },
]

DENIED_WALLETS = {
    '0xcb76129e0ed325e1e5c17f3f363bc2e93a227ecf',
    '0xd27a20a18496ae3200358e569b107d62a1e3f463',
    '0xeb6eda5049dd8c8026314960eebde425021f2d2c',
    '0x74d093f6911ac080897c3145441103dabb869307',
    '0xcba4fdb66456b0a9f30f0714ed0f79fe2ba5901b',
    '0x0cb48f40f1081c44b10e05907860f8135b64a678',
    '0xd33dfbfb0d0961284656e0225cffb561090762d3',
    '0x81a832bc8e6f2c6b2c91a2d334557d8017bb8628',
    '0x7302abbcac4bc4b6238a3e585950e01d8700b5dd',
    '0x2f032a6634e59f430d16c952ea53dcff123fea09',
    '0xaf1577f6a113da0bc671a59d247528811501cf94',
}


class Achievement(BaseModel):
    user_address: str
    achievement_id: str


def tournament_notices(rives: Rives) -> list[Notice]:
    """
    Returns a list of notices generated by the validation of tapes submitted
    for DOOM Olympics contests.
    """
    contest_ids = [x['contest_id'] for x in DOOM_OLYMPICS_CONTESTS]
    notices = rives.get_contests_scores(contest_ids, n_records=5000)
    return notices


def remove_achievements_from_deny_list(
    achievements: list[Achievement]
) -> list[Achievement]:
    """
    Removes all achievements from ineligible wallets
    """
    return [x for x in achievements if x.user_address not in DENIED_WALLETS]


def tournament_leaderboard(tournament_notices: list[Notice]) -> pd.DataFrame:
    """
    Compute the leaderboard DataFrame from the notices.
    """
    contest_ids = [x['contest_id'] for x in DOOM_OLYMPICS_CONTESTS]

    leaderboard = compute_leaderboard(
        notices=tournament_notices,
        contest_ids=contest_ids,
    )
    return leaderboard


def compute_achievements(leaderboard: pd.DataFrame) -> list[Achievement]:
    achievements = []

    achievements.extend(_participation_achievements(leaderboard))
    achievements.extend(_contest_top_3_achievements(leaderboard))
    achievements.extend(_global_leaderboard_achievements(leaderboard))
    achievements.extend(_completionist_achievement(leaderboard))
    achievements.extend(_top_100_achievement(leaderboard))

    return achievements


def _participation_achievements(
        leaderboard: pd.DataFrame
) -> list[Achievement]:
    """
    Award simple participation achievements
    """
    achievement = []

    for user_address in leaderboard.index.values:
        achievement.extend([
            Achievement(user_address=user_address,
                        achievement_id='tape-creator'),
            Achievement(user_address=user_address,
                        achievement_id='doom-olympian'),
            Achievement(user_address=user_address,
                        achievement_id='contest-participation'),
        ])

    return achievement


def _contest_top_3_achievements(
        leaderboard: pd.DataFrame
) -> list[Achievement]:
    """
    Award achievements for people who finished 1st, 2nd and 3rd in any of the
    contests.
    """
    rank_1, rank_2, rank_3 = set(), set(), set()
    contest_ids = [x['contest_id'] for x in DOOM_OLYMPICS_CONTESTS]

    for contest in contest_ids:
        rank = (
            leaderboard[(contest, 'rank')]
            .dropna()
            .sort_values(ascending=True)
        )

        rank_1.add(rank.index.values[0])
        rank_2.add(rank.index.values[1])
        rank_3.add(rank.index.values[2])

    achievements = []
    achievements.extend([
        Achievement(user_address=x, achievement_id='contest-gold')
        for x in rank_1
    ])
    achievements.extend([
        Achievement(user_address=x, achievement_id='contest-silver')
        for x in rank_2
    ])
    achievements.extend([
        Achievement(user_address=x, achievement_id='contest-bronze')
        for x in rank_3
    ])
    return achievements


def _global_leaderboard_achievements(
        leaderboard: pd.DataFrame
) -> list[Achievement]:
    """
    Award achievements for people who finished 1st, 2nd and 3rd in the Global
    Leaderboard.
    """
    return [
        Achievement(user_address=leaderboard.index.values[0],
                    achievement_id='doom-olympics-global-gold'),
        Achievement(user_address=leaderboard.index.values[1],
                    achievement_id='doom-olympics-global-silver'),
        Achievement(user_address=leaderboard.index.values[3],
                    achievement_id='doom-olympics-global-bronze'),
    ]


def _completionist_achievement(
        leaderboard: pd.DataFrame
) -> list[Achievement]:
    """
    Award the Completionist achievements for people who submitted to all
    contests.
    """
    complete = leaderboard.dropna()

    return [
        Achievement(user_address=x,
                    achievement_id='doom-olympics-completionist')
        for x in complete.index.values
    ]


def _top_100_achievement(
        leaderboard: pd.DataFrame
) -> list[Achievement]:
    """
    Award the Completionist achievements for people who submitted to all
    contests.
    """
    top_100 = leaderboard.head(100)

    return [
        Achievement(user_address=x,
                    achievement_id='doom-olympics-top-100')
        for x in top_100.index.values
    ]


def create_achievement_report(achievements: pd.DataFrame) -> str:

    report = "# Achievements Report\n"
    report += "\nThis report was automatically generated by the "
    report += "get_participants.py script.\n"
    report += "\n## Raffle Entries per Wallet Address\n\n"
    report += _count_achievements(achievements).to_markdown(index=False)
    report += "\n\n## Achievements per Wallet Address\n\n"
    report += _pivot_achievements(achievements).to_markdown()
    report += "\n\n## All Achievements\n\n"
    report += achievements.to_markdown(index=False)
    report += '\n'
    return report


def _count_achievements(achievement: pd.DataFrame):
    """
    Returns a DataFrame with one user address per row, and a column containing
    the number of achievements awarded to this user.
    """
    counts = (
        achievement
        .groupby('user_address')
        .size()
        .rename('count')
        .reset_index()
        .sort_values('user_address')
    )
    return counts


def _pivot_achievements(achievement: pd.DataFrame):
    """
    Returns a DataFrame with one user address per row, one achievement per
    column, and the word "Awarded" in cells where the user has the
    corresponding achievement awarded.
    """
    pivoted = (
        achievement
        .assign(value="Awarded")
        .pivot(
            columns='achievement_id',
            index='user_address',
            values='value'
        )
        .fillna("")
        .sort_index(axis=1)
        .sort_index(axis=0)
    )
    return pivoted


def main():
    """Download Doom Olympics submissions and generate participants file"""

    console = Console()
    rives = Rives(
        graphql_url_prefix=GRAPHQL_URL,
        inspect_url_prefix=INSPECT_URL
    )

    with console.status('Downloading Notices') as status:
        notices = tournament_notices(rives)
        console.log(f'Found a total of {len(notices)} notices')

        status.update("Computing Leaderboard")
        leaderboard = tournament_leaderboard(notices)
        console.log(f'Leaderboard has {leaderboard.shape[0]} players')

        status.update("Computing Achievements")
        achievements = compute_achievements(leaderboard)
        console.log(f'Got {len(achievements)} achievements before filtering')
        achievements = remove_achievements_from_deny_list(achievements)
        console.log(f'Got {len(achievements)} achievements after filtering')

        status.update("Summarizing Achievements")

        console.log('Writing achievements report to achievements.md')
        df = pd.DataFrame([x.dict() for x in achievements])
        with open('achievements.md', 'w') as fout:
            fout.write(create_achievement_report(df))

        console.log('Writing raffle entries to raffle_entries.json')
        entries = _count_achievements(df)
        entries.to_json('raffle_entries.json', orient='records', indent=4)


if __name__ == '__main__':
    typer.run(main)
